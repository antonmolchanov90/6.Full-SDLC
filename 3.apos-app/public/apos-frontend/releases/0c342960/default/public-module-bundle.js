// BUILD: src
(()=>{"use strict";var __webpack_modules__={813:()=>{eval("\n;// CONCATENATED MODULE: ./node_modules/apostrophe/modules/@apostrophecms/util/ui/src/util.js\n// Adds minimal services to the apos object replacing\n// functionality widget players can't live without,\n// and provides the `runPlayers` method to run all players\n// once if not run previously.\n//\n// Also schedules that method to run automatically when\n// the DOM is ready.\n//\n// Adds apos to window if not already present.\n//\n// This is a lean, IE11-friendly implementation.\n\n/* harmony default export */ const util = (() => {\n\n  const apos = window.apos;\n  apos.util = {};\n\n  // emit a custom event on the specified DOM element in a cross-browser way.\n  // If `data` is present, the properties of `data` will be available on the event object\n  // in your event listeners. For events unrelated to the DOM, we often emit on\n  // `document.body` and call `addEventListener` on `document.body` elsewhere.\n  //\n  // \"Where is `apos.util.on`?\" You don't need it, use `addEventListener`, which is\n  // standard.\n\n  apos.util.emit = function(el, name, data) {\n    let event;\n    try {\n      // Modern. We can't sniff for this, we can only try it. IE11\n      // has it but it's not a constructor and throws an exception\n      event = new window.CustomEvent(name);\n    } catch (e) {\n      // bc for IE11\n      event = document.createEvent('Event');\n      event.initEvent(name, true, true);\n    }\n    apos.util.assign(event, data || {});\n    el.dispatchEvent(event);\n  };\n\n  // Fetch the cookie by the given name\n  apos.util.getCookie = function(name) {\n    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));\n    return match && match[2];\n  };\n\n  // Remove a CSS class, if present.\n  // http://youmightnotneedjquery.com/\n\n  apos.util.removeClass = function(el, className) {\n    if (el.classList) {\n      el.classList.remove(className);\n    } else {\n      el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n    }\n  };\n\n  // Add a CSS class, if missing.\n  // http://youmightnotneedjquery.com/\n\n  apos.util.addClass = function(el, className) {\n    if (el.classList) {\n      el.classList.add(className);\n    } else {\n      el.className += ' ' + className;\n    }\n  };\n\n  // A wrapper for the native closest() method of DOM elements,\n  // where available, otherwise a polyfill for IE9+. Returns the\n  // closest ancestor of el that matches selector, where\n  // el itself is considered the closest possible ancestor.\n\n  apos.util.closest = function(el, selector) {\n    if (el.closest) {\n      return el.closest(selector);\n    }\n    // Polyfill per https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n    if (!Element.prototype.matches) {\n      Element.prototype.matches = Element.prototype.msMatchesSelector ||\n        Element.prototype.webkitMatchesSelector;\n    }\n    Element.prototype.closest = function(s) {\n      let el = this;\n      if (!document.documentElement.contains(el)) {\n        return null;\n      }\n      do {\n        if (el.matches(s)) {\n          return el;\n        }\n        el = el.parentElement || el.parentNode;\n      } while (el !== null && el.nodeType === 1);\n      return null;\n    };\n    return el.closest(selector);\n  };\n\n  // Like Object.assign. Uses Object.assign where available.\n  // (Takes us back to IE9)\n\n  apos.util.assign = function(obj1, obj2 /*,  obj3... */) {\n    if (Object.assign) {\n      return Object.assign.apply(Object, arguments);\n    }\n    let i, j, keys, key;\n    for (i = 1; (i < arguments.length); i++) {\n      keys = Object.keys(arguments[i]);\n      for (j = 0; (j < keys.length); j++) {\n        key = keys[j];\n        obj1[key] = arguments[i][key];\n      }\n    }\n    return obj1;\n  };\n\n  // Map of widget players. Adding one is as simple as:\n  // window.apos.util.widgetPlayers['widget-name'] = function(el, data, options) {}\n  //\n  // Use the widget's name, like \"apostrophe-images\", NOT the name of its module.\n  //\n  // Your player receives the DOM element of the widget and the\n  // pre-parsed `data` and `options` objects associated with it,\n  // as objects. el is NOT a jQuery object, because jQuery is not pushed\n  // (we push no libraries in the lean world).\n  //\n  // Your player should add any needed javascript effects to\n  // THAT ONE WIDGET and NO OTHER. Don't worry about finding the\n  // others, we will do that for you and we guarantee only one call per widget.\n\n  apos.util.widgetPlayers = {};\n\n  // Run the given function whenever the DOM has new changes that\n  // may require attention. The passed function will be\n  // called when the DOM is ready on initial page load, and also\n  // when the main content area has been refreshed by the editor.\n  // Note that you don't need this for widgets; see widget players.\n\n  // NOTE: onReadyAndRefresh has been aliased to apos.util.onReady,\n  // which is the recommended way to call this functionality.\n  // onReadyAndRefresh will be deprecated in the next major version.\n\n  apos.util.onReadyAndRefresh = function(fn) {\n    onReady(fn);\n    // Allow Apostrophe to create the bus first\n    setTimeout(function() {\n      apos.bus && apos.bus.$on('refreshed', fn);\n    }, 0);\n    function onReady(fn) {\n      if (document.readyState !== 'loading') {\n        setTimeout(fn, 0);\n      } else if (document.addEventListener) {\n        document.addEventListener('DOMContentLoaded', fn);\n      } else {\n        document.attachEvent('onreadystatechange', function() {\n          if (document.readyState !== 'loading') {\n            fn();\n          }\n        });\n      }\n    }\n  };\n\n  // Alias for onReadyAndRefresh, the recommended way to use and document this functionality\n  apos.util.onReady = apos.util.onReadyAndRefresh.bind(apos.util.onReadyAndRefresh);\n\n  // Run all the players that haven't been run. Invoked for you at DOMready\n  // time. You may also invoke it if you just AJAXed in some content and\n  // have reason to suspect there could be widgets in there. You may pass:\n  //\n  // * Nothing at all - entire document is searched for new widgets to enhance, or\n  // * A DOM element - new widgets to enhance are found within this scope only.\n  //\n  // To register a widget player for the `apostrophe-images` widget, write:\n  //\n  // `apos.util.widgetPlayers['apostrophe-images'] = function(el, data, options) { ... }`\n  //\n  // `el` is a DOM element, not a jQuery object. Otherwise identical to\n  // traditional Apostrophe widget players. `data` contains the properties\n  // of the widget itself, `options` contains the options that were\n  // passed to it at the area level.\n  //\n  // Your player is guaranteed to run only once per widget. Hint:\n  // DON'T try to find all the widgets. DO just enhance `el`.\n  // This is a computer science principle known as \"separation of concerns.\"\n\n  apos.util.runPlayers = function(el) {\n    const players = apos.util.widgetPlayers;\n    const playerList = Object.keys(players);\n\n    for (let i = 0; i < playerList.length; i++) {\n      const playerOpts = players[playerList[i]];\n      const playerEls = (el || document).querySelectorAll(playerOpts.selector);\n\n      playerEls.forEach(function (el) {\n        if (el.aposWidgetPlayed) {\n          return;\n        }\n        // Use an actual property, not a DOM attribute or\n        // \"data\" prefix property, to avoid the problem of\n        // elements cloned from innerHTML appearing to have\n        // been played too\n        el.aposWidgetPlayed = true;\n        playerOpts.player(el);\n      });\n    }\n  };\n\n  // Schedule runPlayers to run as soon as the document is ready, and also\n  // when the page is partially refreshed by the editor.\n\n  if (!apos.bus) {\n    apos.util.onReadyAndRefresh(function() {\n      apos.util.runPlayers();\n    });\n  }\n\n  // Given an attachment field value,\n  // return the file URL. If options.size is set, return the URL for\n  // that size (one-sixth, one-third, one-half, two-thirds, full, max).\n  // full is \"full width\" (1140px), not the original.\n  //\n  // If you don't pass the options object, or options does not\n  // have a size property, you'll get the URL of the original.\n  // IMPORTANT: FOR IMAGES, THIS MAY BE A VERY LARGE FILE, NOT\n  // WHAT YOU WANT. Set `size` appropriately!\n  //\n  // You can also pass a crop object (the crop must already exist).\n\n  apos.util.attachmentUrl = function(file, options) {\n    let path = apos.uploadsUrl + '/attachments/' + file._id + '-' + file.name;\n    if (!options) {\n      options = {};\n    }\n    // NOTE: the crop must actually exist already, you can't just invent them\n    // browser-side without the crop API ever having come into play. If the\n    // width is 0 the user hit save in the cropper without cropping, use\n    // the regular version\n    let crop;\n    if (options.crop && options.crop.width) {\n      crop = options.crop;\n    } else if (file.crop && file.crop.width) {\n      crop = file.crop;\n    }\n    if (crop) {\n      path += '.' + crop.left + '.' + crop.top + '.' + crop.width + '.' + crop.height;\n    }\n    let effectiveSize;\n    if ((!options.size) || (options.size === 'original')) {\n      effectiveSize = false;\n    } else {\n      effectiveSize = options.size;\n    }\n    if (effectiveSize) {\n      path += '.' + effectiveSize;\n    }\n    return path + '.' + file.extension;\n  };\n\n  // Returns true if the uri references the same site (same host and port) as the\n  // current page. Cross-browser implementation, valid at least back to IE11.\n  // Regarding port numbers, this will match as long as the URIs are consistent\n  // about not explicitly specifying the port number when it is 80 (HTTP) or 443 (HTTPS),\n  // which is generally the case.\n\n  apos.util.sameSite = function(uri) {\n    const matches = uri.match(/^(https?:)?\\/\\/([^/]+)/);\n    if (!matches) {\n      // If URI is not absolute or protocol-relative then it is always same-origin\n      return true;\n    }\n    return window.location.host === matches[2];\n  };\n});\n\n;// CONCATENATED MODULE: ./node_modules/apostrophe/modules/@apostrophecms/util/ui/src/http.js\n/* harmony default export */ const http = (() => {\n  // Adds the apos.http client, which has the same API\n  // as the server-side apos.http client, although it may\n  // not have exactly the same features available.\n  // This is a lean, IE11-friendly implementation.\n\n  const busyActive = {};\n  const apos = window.apos;\n  apos.http = {};\n\n  // Send a POST request. Note that POST body data should be in\n  // `options.body`. See `apos.http.remote` for details.\n  // You do NOT have to pass a callback unless you must support IE11\n  // and do not want to include a promise polyfill in your build.\n\n  apos.http.post = function(url, options, callback) {\n    return apos.http.remote('POST', url, options, callback);\n  };\n\n  // Send a GET request. Note that query string data may be in\n  // `options.qs`. See `apos.http.remote` for details.\n  // You do NOT have to pass a callback unless you must support IE11\n  // and do not want to include a promise polyfill in your build.\n  apos.http.get = function(url, options, callback) {\n    return apos.http.remote('GET', url, options, callback);\n  };\n\n  // Send a PATCH request. Note that PATCH body data should be in\n  // `options.body`. See `apos.http.remote` for details.\n  // You do NOT have to pass a callback unless you must support IE11\n  // and do not want to include a promise polyfill in your build.\n  apos.http.patch = function(url, options, callback) {\n    return apos.http.remote('PATCH', url, options, callback);\n  };\n\n  // Send a PUT request. Note that PUT body data should be in\n  // `options.body`. See `apos.http.remote` for details.\n  // You do NOT have to pass a callback unless you must support IE11\n  // and do not want to include a promise polyfill in your build.\n  apos.http.put = function(url, options, callback) {\n    return apos.http.remote('PUT', url, options, callback);\n  };\n\n  // Send a DELETE request. See `apos.http.remote` for details.\n  // You do NOT have to pass a callback unless you must support IE11\n  // and do not want to include a promise polyfill in your build.\n  apos.http.delete = function(url, options, callback) {\n    return apos.http.remote('DELETE', url, options, callback);\n  };\n\n  // Send an HTTP request with the given method to the given URL and return the response body.\n  //\n  // The callback is optional as long as Promise support is present in the browser, directly or as\n  // a polyfill. If a callback is used it will receive `(err, result)` where `result` is the\n  // return value described below.\n  //\n  // Accepts the following options:\n  //\n  // `qs` (pass object; builds a query string, does not support recursion)\n  // `send`: by default, `options.body` is sent as JSON if it is an object and it is not a\n  // `FormData` object. If `send` is set to `json`, it is always sent as JSON.\n  // `body` (request body, not for GET; if an object or array, sent as JSON, otherwise sent as-is, unless\n  // the `send` option is set)\n  // `parse` (can be 'json` to always parse the response body as JSON, otherwise the response body is\n  // parsed as JSON only if the content-type is application/json)\n  // `headers` (an object containing header names and values)\n  // `draft` (if true, always add aposMode=draft to the query string, creating one if needed)\n  // `csrf` (unless explicitly set to `false`, send the X-XSRF-TOKEN header when talking to the same site)\n  // `fullResponse` (if true, return an object with `status`, `headers` and `body`\n  // properties, rather than returning the body directly; the individual `headers` are canonicalized\n  // to lowercase names. If there are duplicate headers after canonicalization only the\n  // last value is returned. If a header appears multiple times an array is returned for it)\n  // `downloadProgress` (may be a function accepting `received` and `total` parameters. May never be called. If\n  // called, `received` will be the bytes sent so far, and `total` will be the total bytes to be\n  // received. If the total is unknown, it will be `null`)\n  // `uploadProgress` (may be a function accepting `sent` and `total` parameters. May never be called. If\n  // called, `sent` will be the bytes sent so far, and `total` will be the total bytes to be\n  // sent. If the total is unknown, it will be `null`)\n  //\n  // If the status code is >= 400 an error is thrown. The error object will be\n  // similar to a `fullResponse` object, with a `status` property.\n  //\n  // If the URL is site-relative (starts with /) it will be requested from\n  // the apostrophe site itself.\n\n  // Just before the XMLHTTPRequest is sent this method emits an\n  // `apos-before-post` event on `document.body` (where `post` changes\n  // to match the method, in lower case). The event object\n  // has `uri`, `data` and `request` properties. `request` is the\n  // XMLHTTPRequest object. You can use this to set custom headers\n  // on all lean requests, etc.\n\n  apos.http.remote = function(method, url, options, callback) {\n    if (!callback) {\n      if (!window.Promise) {\n        throw new Error('If you wish to receive a promise from apos.http methods in older browsers you must have a Promise polyfill. If you do not want to provide one, pass a callback instead.');\n      }\n      return new window.Promise(function(resolve, reject) {\n        return apos.http.remote(method, url, options, function(err, result) {\n          if (err) {\n            return reject(err);\n          }\n          return resolve(result);\n        });\n      });\n    }\n\n    if (apos.prefix) {\n      // We don't need a prefix if the target URL is already prefixed,\n      // which any absolute URL should be\n      if (url.substring(0, 1) === '/') {\n        url = apos.prefix + url;\n      }\n    }\n\n    let query;\n    let qat;\n\n    // Intentional true / falsey check for determining\n    // what set of docs the request is interested in\n    if (options.draft != null) {\n      if (options.qs) {\n        // Already assumes no query parameters baked into URL, so OK to\n        // just extend qs\n        options.qs = options.draft\n          ? apos.util.assign({ aposMode: 'draft' }, options.qs)\n          : apos.util.assign({ aposMode: 'published' }, options.qs);\n      } else {\n        // Careful, there could be existing query parameters baked into url\n        qat = url.indexOf('?');\n        if (qat !== -1) {\n          query = apos.http.parseQuery(url.substring(qat));\n        } else {\n          query = {};\n        }\n        query.aposMode = options.draft ? 'draft' : 'published';\n        url = apos.http.addQueryToUrl(url, query);\n      }\n    }\n\n    const busyName = options.busy === true ? 'busy' : options.busy;\n    const xmlhttp = new XMLHttpRequest();\n    const csrfToken = apos.csrfCookieName ? apos.util.getCookie(apos.csrfCookieName) : 'csrf-fallback';\n    let data = options.body;\n    let keys;\n    let i;\n    if (options.qs) {\n      url = apos.http.addQueryToUrl(url, options.qs);\n    }\n    if (options.busy) {\n      if (!busyActive[busyName]) {\n        busyActive[busyName] = 0;\n        apos.bus.$emit('busy', {\n          active: true,\n          name: busyName\n        });\n      }\n      // keep track of nested calls\n      busyActive[busyName]++;\n    }\n    xmlhttp.open(method, url);\n    const formData = window.FormData && (data instanceof window.FormData);\n    const sendJson = (options.send === 'json') || (options.body && ((typeof options.body) === 'object') && !formData);\n    if (sendJson) {\n      xmlhttp.setRequestHeader('Content-Type', 'application/json');\n    }\n    if (csrfToken && (options.csrf !== false)) {\n      if (apos.util.sameSite(url)) {\n        xmlhttp.setRequestHeader('X-XSRF-TOKEN', csrfToken);\n      }\n    }\n    if (options.headers) {\n      keys = Object.keys(options.headers);\n      for (i = 0; (i < keys.length); i++) {\n        xmlhttp.setRequestHeader(keys[i], options.headers[keys[i]]);\n      }\n    }\n    apos.util.emit(document.body, 'apos-before-' + method.toLowerCase(), {\n      uri: url,\n      data: options.body,\n      request: xmlhttp\n    });\n    if (sendJson) {\n      data = JSON.stringify(options.body);\n    } else {\n      data = options.body;\n    }\n    xmlhttp.addEventListener('load', function() {\n      let data = null;\n      const responseHeader = this.getResponseHeader('Content-Type');\n      if (responseHeader || (options.parse === 'json')) {\n        if ((options.parse === 'json') || (responseHeader.match(/^application\\/json/))) {\n          try {\n            data = JSON.parse(this.responseText);\n          } catch (e) {\n            return callback(e);\n          }\n        } else {\n          data = this.responseText;\n        }\n      }\n\n      if (xmlhttp.status < 400) {\n        if (options.fullResponse) {\n          return callback(null, {\n            body: data,\n            status: xmlhttp.status,\n            headers: getHeaders()\n          });\n        } else {\n          return callback(null, data);\n        }\n      } else {\n        const error = new Error((data && data.message) || (data && data.name) || 'Error');\n        error.status = xmlhttp.status;\n        error.name = (data && data.name);\n        error.body = data;\n        error.headers = getHeaders();\n        return callback(error);\n      }\n    });\n    xmlhttp.addEventListener('abort', function(evt) {\n      return callback(evt);\n    });\n    xmlhttp.addEventListener('error', function(evt) {\n      return callback(evt);\n    });\n    if (options.downloadProgress) {\n      xmlhttp.addEventListener('progress', function(evt) {\n        options.downloadProgress(evt.loaded, evt.lengthComputable ? evt.total : null);\n      });\n    }\n    if (xmlhttp.upload && options.uploadProgress) {\n      xmlhttp.upload.addEventListener('progress', function(evt) {\n        options.uploadProgress(evt.loaded, evt.lengthComputable ? evt.total : null);\n      });\n    }\n    xmlhttp.addEventListener('loadend', function (evt) {\n      if (options.busy) {\n        busyActive[busyName]--;\n        if (!busyActive[busyName]) {\n          // if no nested calls, disable the \"busy\" state\n          apos.bus.$emit('busy', {\n            active: false,\n            name: busyName\n          });\n        }\n      }\n    });\n    xmlhttp.send(data);\n\n    function getHeaders() {\n      const headers = xmlhttp.getAllResponseHeaders();\n      if (!headers) {\n        return {};\n      }\n      // Per MDN\n      const arr = headers.trim().split(/[\\r\\n]+/);\n      // Create a map of header names to values\n      const headerMap = {};\n      arr.forEach(function (line) {\n        const parts = line.split(': ');\n        const header = parts.shift();\n        if (!header) {\n          return;\n        }\n        const value = parts.shift();\n        // Optional support for fetching arrays of headers with the same name\n        // could be added at a later time if anyone really cares. Usually\n        // just a source of bugs\n        headerMap[header.toLowerCase()] = value;\n      });\n      return headerMap;\n    }\n  };\n\n  // Parse a query string. You can pass with or without the\n  // leading ?. Don't pass the entire URL. Supports objects,\n  // arrays and nesting with the classic PHP/Java bracket syntax.\n  // If a key is set with no = it is considered null, per\n  // the java convention. Good for use with window.location.search.\n\n  apos.http.parseQuery = function(query) {\n    query = query.replace(/^\\?/, '');\n    const data = {};\n    const pairs = query.split('&');\n    pairs.forEach(function(pair) {\n      let parts;\n      if (pair.indexOf('=') === -1) {\n        patch(pair, null);\n      } else {\n        parts = pair.split('=');\n        if (parts) {\n          patch(parts[0], parts[1]);\n        }\n      }\n    });\n    return data.root || {};\n    function patch(key, value) {\n      let match;\n      let parentKey = 'root';\n      let context = data;\n      key = decodeURIComponent(key);\n      const path = key.split('[');\n      path.forEach(function(subKey) {\n        if (subKey === ']') {\n          if (!Array.isArray(context[parentKey])) {\n            context[parentKey] = [];\n          }\n          context = context[parentKey];\n          parentKey = context.length;\n        } else if (subKey.match(/^\\d+]/)) {\n          match = subKey.match(/^\\d+/);\n          if (!Array.isArray(context[parentKey])) {\n            context[parentKey] = [];\n          }\n          context = context[parentKey];\n          parentKey = parseInt(match);\n        } else {\n          match = subKey.replace(']', '');\n          if (!context[parentKey]) {\n            context[parentKey] = {};\n          }\n          context = context[parentKey];\n          parentKey = match;\n        }\n      });\n      value = (value === null) ? value : decodeURIComponent(value);\n      if (Array.isArray(context[parentKey])) {\n        context[parentKey].push(value);\n      } else if (context[parentKey] !== undefined) {\n        context[parentKey] = [ context[parentKey], value ];\n      } else {\n        context[parentKey] = value;\n      }\n    }\n  };\n\n  // Adds query string data to url. Supports nested structures with objects\n  // and arrays, in a way compatible with qs and most other parsers including\n  // those baked into PHP frameworks etc. If the URL already contains a query\n  // it is discarded and replaced with the new one. All non-query parts of the\n  // URL remain unchanged.\n\n  apos.http.addQueryToUrl = function(url, data) {\n    let hash = '';\n    const hashAt = url.indexOf('#');\n    if (hashAt !== -1) {\n      hash = url.substring(hashAt);\n      url = url.substring(0, hashAt);\n    }\n    url = url.replace(/\\?.*$/, '');\n    let i;\n    let flat;\n    if ((data != null) && ((typeof data) === 'object')) {\n      flat = flatten('', data);\n      for (i = 0; (i < flat.length); i++) {\n        const key = flat[i][0];\n        const val = flat[i][1];\n        if (i > 0) {\n          url += '&';\n        } else {\n          url += '?';\n        }\n        if (val == null) {\n          // Java-style distinction between null and empty string\n          url += encodeURIComponent(key);\n        } else {\n          url += encodeURIComponent(key) + '=' + encodeURIComponent(val);\n        }\n      }\n    }\n    return url + hash;\n    function flatten(path, data) {\n      let flat = [];\n      let keys;\n      let i;\n      if (Array.isArray(data)) {\n        for (i = 0; (i < data.length); i++) {\n          insert(i, data[i]);\n        }\n      } else {\n        keys = Object.keys(data);\n        for (i = 0; (i < keys.length); i++) {\n          insert(keys[i], data[keys[i]]);\n        }\n      }\n      return flat;\n      function insert(key, datum) {\n        if ((datum != null) && ((typeof datum) === 'object')) {\n          flat = flat.concat(flatten(path.length ? path + '[' + key + ']' : key, datum));\n        } else {\n          flat.push([ path.length ? path + '[' + key + ']' : key, datum ]);\n        }\n      }\n    }\n  };\n});\n\n;// CONCATENATED MODULE: ./node_modules/apostrophe/modules/@apostrophecms/util/ui/src/index.js\n\n\n\n/* harmony default export */ const src = (() => {\n  util();\n  http();\n});\n\n;// CONCATENATED MODULE: ./node_modules/apostrophe/modules/@apostrophecms/video-widget/ui/src/index.js\n/* harmony default export */ const ui_src = (() => {\n  apos.util.widgetPlayers['@apostrophecms/video'] = {\n    selector: '[data-apos-video-widget]',\n    player: function(el) {\n      const videoUrl = el.getAttribute('data-apos-video-url');\n      let queryResult;\n\n      if (!videoUrl) {\n        return;\n      }\n\n      queryAndPlay(el, {\n        url: videoUrl\n      });\n\n      function queryAndPlay(el, options) {\n        apos.util.removeClass(el, 'apos-oembed-invalid');\n        apos.util.addClass(el, 'apos-oembed-busy');\n        if (!options.url) {\n          return fail('undefined');\n        }\n        return query(options, function(err, result) {\n          queryResult = result;\n          if (err || (options.type && (result.type !== options.type))) {\n            return fail(err || 'inappropriate');\n          }\n          apos.util.removeClass(el, 'apos-oembed-busy');\n          return play(el, result);\n        });\n      }\n\n      function query(options, callback) {\n        const opts = {\n          qs: {\n            url: options.url\n          }\n        };\n        return apos.http.get('/api/v1/@apostrophecms/oembed/query', opts, callback);\n      }\n\n      function play(el, result) {\n        const shaker = document.createElement('div');\n        shaker.innerHTML = result.html;\n        const inner = shaker.firstChild;\n        inner.setAttribute('data-apos-video-canvas', '');\n        el.innerHTML = '';\n        if (!inner) {\n          return;\n        }\n        inner.removeAttribute('width');\n        inner.removeAttribute('height');\n        el.append(inner);\n        // wait for CSS width to be known\n        setTimeout(function() {\n          // If oembed results include width and height we can get the\n          // video aspect ratio right\n          if (result.width && result.height) {\n            inner.style.width = '100%';\n            resizeVideo(inner);\n            // If we need to initially size the video, also resize it on window\n            // resize.\n            window.addEventListener('resize', resizeHandler);\n          } else {\n            // No, so assume the oembed HTML code is responsive.\n          }\n        }, 0);\n      }\n\n      function resizeVideo(canvasEl) {\n        canvasEl.style.height = ((queryResult.height / queryResult.width) * canvasEl.offsetWidth) + 'px';\n      };\n\n      function resizeHandler() {\n        if (document.contains(el)) {\n          resizeVideo(el.querySelector('[data-apos-video-canvas]'));\n        } else {\n          window.removeEventListener('resize', resizeHandler);\n        }\n      }\n\n      function fail(err) {\n        apos.util.removeClass(el, 'apos-oembed-busy');\n        apos.util.addClass(el, 'apos-oembed-invalid');\n        console.error(err);\n        if (err !== 'undefined') {\n          el.innerHTML = '<p>Error loading video</p>';\n        } else {\n          el.innerHTML = '';\n        }\n      }\n    }\n  };\n});\n\n;// CONCATENATED MODULE: ./modules/asset/ui/src/index.js\n/* harmony default export */ const asset_ui_src = (() => {\n  // Your own project level JS may go here\n  console.log('Hello World');\n});\n\n;// CONCATENATED MODULE: ./modules/asset/ui/src/index.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./apos-build/default/src-import.js\n(function() {\n    window.apos = window.apos || {};\n    var data = document.body && document.body.getAttribute('data-apos');\n    Object.assign(window.apos, JSON.parse(data || '{}'));\n    if (data) {\n      document.body.removeAttribute('data-apos');\n    }\n    if (window.apos.modules) {\n      for (const module of Object.values(window.apos.modules)) {\n        if (module.alias) {\n          window.apos[module.alias] = module;\n        }\n      }\n    }\n})();\n\n\n\n\n\n\n\n\n  \nsrc();\nui_src();\nasset_ui_src();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///813\n")}},__webpack_exports__={};__webpack_modules__[813]()})();
// BUILD: public

